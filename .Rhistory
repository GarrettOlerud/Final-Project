hours_in_a_week
# write a script
hours_in_a_week <- 24*7
# write a script
hours_in_a_week <- 24*7
library(nycflights13)
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
??flights
nrow(flights) # Returns 336776
ncol(flights) # Returns 19
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, flight_time_gain = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights_descending <- arrange(flights, -flight_time_gain)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>%
mutate(flight_time_gain = arr_delay - dep_delay) %>%
arrange(-flight_time_gain)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$flight_time_gain)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$flight_time_gain, na.rm = TRUE) # On average, flights lost time
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_seatac <- flights %>%
select(origin, dest, flight_time_gain) %>%
filter(dest == "SEA")
View(to_seatac)
# On average, did flights to SeaTac gain or loose time?
mean(to_seatac$flight_time_gain, na.rm = TRUE)
# On average, flights lost time to SeaTac
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
jfk_to_sea <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarise(
mean_air = mean(air_time, na.rm = TRUE),
min_air = min(air_time, na.rm = TRUE),
max_air = max(air_time, na.rm = TRUE)
)
flights %>%
group_by(origin) %>%
summarize(avg_delay = mean(dep_delay, na.rm = TRUE)
?mtcars
install.packages("ggmap")
query_params <- list("key" = civic_info_api, address = address)
library("httr")
library("jsonlite")
source("api-keys.R")
address <- "4535 18th Ave NE, Seattle, WA 98105"
base_uri <- "https://www.googleapis.com/civicinfo/v2/"
resource <- "representatives"
endpoint <- paste0(base_uri, resource)
query_params <- list("key" = civic_info_api, address = address)
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='hessmad11', token='92F718CB0DE4DA9B975A2B5B5296080D', secret='EUAsaFOz5Sljy1VI3cU9IlfICJqGhGlffR+96RVP')
shiny::runApp('C:/Users/Madi/Desktop/a8-shiny-hessmad')
library(shiny)
library(httpuv)
library("dplyr")
library(plotly)
#install.packages("rsconnect")
#rsconnect::setAccountInfo(name='hessmad11', token='92F718CB0DE4DA9B975A2B5B5296080D', secret='EUAsaFOz5Sljy1VI3cU9IlfICJqGhGlffR+96RVP')
midwest_data <- midwest
# Midwest education levels
midwest_edu <- midwest_data %>%
group_by(state) %>%
summarise(
perc_college = mean(percollege),
perc_hsd = mean(perchsd),
perc_prof = mean(percprof)
)
colnames(midwest_edu) <- c(
"State", "Percent College Educated",
"Percent HS Diploma", "Percent Profession"
)
edu_options <- colnames(midwest_edu[, 2:4])
edu_states <- midwest_edu$State
# Midwest demographics
midwest_pop <- midwest_data %>%
group_by(state) %>%
select(
county, state, percamerindan, percasian, percblack, percwhite,
percother
)
colnames(midwest_pop) <- c(
"County", "State", "Percent Native American", "Percent Asian",
"Percent Black", "Percent White", "Percent Other"
)
pop_options <- colnames(midwest_pop[, 3:7])
# Begin server
shinyServer(function(input, output) {
# Render a scatter plot of demographic data
output$pop_scatter <- renderPlotly({
pop_plot <- plot_ly(
x = ~ midwest_pop$State, y = ~ input$pop_var, mode = "markers",
type = "scatter", color = ~ midwest_pop$State, source = "subset",
marker = list(size = 30)
) %>%
layout(
title = paste("State vs ", input$pop_var),
xaxis = list(title = midwest_pop$State),
yaxis = list(title = input$pop_var),
dragmode = "select",
plot_bgcolor = "6A446F"
)
return(pop_plot)
})
# Render a plot of state and average education levels
output$edu_bar <- renderPlot({
# Store x and y values to plot
df <- filter(midwest_edu, State == input$x_var)
x <- input$x_var
y <- pull(df, input$y_var)
# Store the title of the graph in a variable
title <- paste0("Midwest Data: ", input$x_var, " v.s.", input$y_var)
# Create ggplot bar
p <- ggplot() +
geom_bar(mapping = aes(x = x, y = y), stat = "identity") +
scale_y_continuous(limits = c(0, 100)) +
labs(x = input$x_var, y = input$y_var, title = title)
return(p)
})
})
runApp('C:/Users/Madi/Desktop/a8-shiny-hessmad')
shiny::runApp('C:/Users/Madi/Desktop/Final-Project')
