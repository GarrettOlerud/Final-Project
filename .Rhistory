# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- movies[-4]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the appropriate function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- Sys.Date()
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date("2018-6-8")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
days_till_bday <- as.Date("2018-9-10") - today
new_age <- my_age + 1
make_birthday_intro <- function(name, age, days, new_age) {
intro <- make_introduction(name, age)
birthday_intro <- paste0(intro, " In ", days, " days I'll be ", new_age, ".")
return(birthday_intro)
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, days_till_bday, new_age)
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(a, b){
x <- c("INFO 201", "CSE 142")
remove <- gsub("[0-9]+", " ", x)
return(remove)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(x)
my_bday_intro
library(dpylr)
library(dplyr)
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
View(nycflights13)
View("nycflights13")
library("nycflights13')
library("nycflights13")
library("nycflights13")
View(flights)
colnames(flights)
colnames(flights)
ncol(flights)
nrow(flights)
??flights
air_delay <- mutate(flights, delay_during_flight = arr_delay - dep_delay)
flights <- mutate(flights, delay_during_flight = arr_delay - dep_delay)
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay)
View(flights)
flights <- arrange(flights, desc(gain_in_air))
View(head(flights))
flights <- arrange(flights, desc(gain_in_air)) %>%
View(head(flights))
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay) %>%  arrange(flights, desc(gain_in_air))
flights <- flights %>%  mutate(flights, gain_in_air = arr_delay - dep_delay) %>% arrange(flights, desc(gain_in_air))
flights <- filghits %>%
arrange(-gain_in_air)
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay)
# Exercise 5: dplyr grouped operations
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
# Which month had the greatest average departure delay?
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
# You can look up these airports in the `airports` data frame!
# Which city was flown to with the highest average speed?
library(dplyr)
library(nycflights13)
dep_delay_by_mounth <- flights %>%
group_by(mounth) %>%
summarise(delay = mean(dep_delay, na.rm = T))
library(dplyr)
dep_delay_by_mounth <- flights %>%
group_by(mounth) %>%
summarise(delay = mean(dep_delay, na.rm = T))
library(nycflights13)
dep_delay_by_mounth <- flights %>%
group_by(mounth) %>%
summarise(delay = mean(dep_delay, na.rm = T))
View(flights)
library(nycflights13)
library(dplyr)
dep_delay_by_mounth <- flights %>%
group_by(mounth) %>%
summarise(delay = mean(dep_delay, na.rm = T))
dep_delay_by_mounth <- flights %>%
group_by(month) %>%
summarise(delay = mean(dep_delay, na.rm = T))
filter(dep_delay_by_mounth, delay == max(delay)) %>%
select(mounth)
filter(dep_delay_by_month, delay == max(delay)) %>%
select(month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(delay = mean(dep_delay, na.rm = T))
filter(dep_delay_by_month, delay == max(delay)) %>%
select(month)
plot(dep_delay_by_month)
big_delay <- flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = T)) %>%
arrange(-delay)
head(big_delay)
View(airports)
library(nycflights13)
library(dplyr)
library("httr")
shiny::runApp('C:/Users/Garre/Desktop/info201/ch16-shiny/exercise-3')
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
ui <- fluidPage(
# A page header
h1("Car MPG's"),
# Add a select input for the x variable
selectInput(
"x_var",
label = "x variable",
choices = select_values,
selected = "displ"
),
# Add a select input for the y variable
selectInput(
"y_var",
label = "y variable",
choices = select_values,
selected = "cyl"
),
# Add a sliderInput to set the size of each point
sliderInput("size", label = "size of point", min = 0, max = 10, value = 1
),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color", label = "color", choices = list("RED" = "red", "Blue" = "blue", "Orange" = "orange"
)),
# Plot the output with the name "scatter"
plotOutput("scatter")
)
shinyUI(ui)
ui <- fluidPage(
# A page header
h1("Car MPG's"),
# Add a select input for the x variable
selectInput(
"x_var",
label = "x variable",
choices = select_values,
selected = "displ"
),
# Add a select input for the y variable
selectInput(
"y_var",
label = "y variable",
choices = select_values,
selected = "cyl"
),
# Add a sliderInput to set the size of each point
sliderInput("size", label = "size of point", min = 0, max = 10, value = 1
),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color", label = "color", choices = list("RED" = "red", "Blue" = "blue", "Orange" = "orange"
)),
# Plot the output with the name "scatter"
plotOutput("scatter")
)
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
h1("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "displ"
),
# Add a select input for the y variable
selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "cyl"
),
# Add a sliderInput to set the size of each point
sliderInput("size", label = "Size of point", min = 1, max = 10, value = 5),
# Add a selectInput that allows you to select a color from a list of choices
selectInput(
"color",
label = "Color",
choices = list("Red" = "red", "Blue" = "blue", "Green" = "green")
),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
runApp('C:/Users/Garre/Desktop/info201/ch16-shiny/exercise-3')
runApp('C:/Users/Garre/Desktop/info201/ch16-shiny/exercise-1')
runApp('C:/Users/Garre/Desktop/info201/ch16-shiny/exercise-1')
library(dplyr)
library(ggplot2)
library(knitr)
source("scripts/analysis.R")
source("scripts/chart1")
library(dplyr)
library(ggplot2)
library(knitr)
source("scripts/analysis.R")
source("scripts/chart1.R")
source("scripts/chart2.R")
data <- read.csv("data/intro-survey.csv", stringsAsFactors = FALSE)
summary_data <- intro_function(data)
knitr::opts_chunk$set(echo = TRUE)
shiny::runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
colnames(midwest)
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
mutate(df_m, threshhold = input$decimal > percpovertyknown)
mutate(df_m, threshhold = 50 > percpovertyknown)
mutate(df_m, threshhold = 50 > percpovertyknown)$threshhold
mutate(df_m, threshhold = 90 > percpovertyknown)$threshhold
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
shiny::runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
shiny::runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
shiny::runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
shiny::runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
shiny::runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
install.packages("zipcode")
library("zipcode")
# Set working directory then read in relevant libraries and data
library("dplyr")
library("maps")
library("zipcode")
install.packages("zipcode")
install.packages("dplyr")
library(zipcode)
library(dplyr)
pet_data <- read.csv("data/seattle_pet_licenses.csv", stringsAsFactors = FALSE)
tax_data <- read.delim("data/wa_incomes_zip_code.csv",
stringsAsFactors = FALSE)
# S/O to Adele for rescuing us
# from this _tab_ seperated file.
pet_data_zip <- pet_data %>% group_by(zip_code)
map <- ggplot(pet_data,aes(longitude,latitude)) +
geom_polygon(data=us,aes(x=long,y=lat,group=group),color='gray',fill=NA,alpha=.35)+
geom_point(aes(color = count),size=.15,alpha=.25) +
xlim(-125,-65)+ylim(20,50)
joined_data <- left_join(pet_data, tax_data, by = )
#Recommend using tax bracket bins and now joining data sets
#Don't join dataframes if it makes no sense
install.packages("zipcode")
# Set working directory then read in relevant libraries and data
library("dplyr")
library("maps")
library("zipcode")
pet_data <- read.csv("data/seattle_pet_licenses.csv", stringsAsFactors = FALSE)
tax_data <- read.delim("data/wa_incomes_zip_code.csv",
stringsAsFactors = FALSE)
# S/O to Adele for rescuing us
# from this _tab_ seperated file.
pet_data_zip <- pet_data %>% group_by(zip_code)
map <- ggplot(pet_data,aes(longitude,latitude)) +
geom_polygon(data=us,aes(x=long,y=lat,group=group),color='gray',fill=NA,alpha=.35)+
geom_point(aes(color = count),size=.15,alpha=.25) +
xlim(-125,-65)+ylim(20,50)
joined_data <- left_join(pet_data, tax_data, by = )
#Recommend using tax bracket bins and now joining data sets
#Don't join dataframes if it makes no sense
pet_data <- read.csv("data/seattle_pet_licenses.csv", stringsAsFactors = FALSE)
tax_data <- read.delim("data/wa_incomes_zip_code.csv",
stringsAsFactors = FALSE)
setwd("C:/Users/Garre/Desktop/info201/Final-Project")
# Set working directory then read in relevant libraries and data
library("dplyr")
library("maps")
library("zipcode")
pet_data <- read.csv("data/seattle_pet_licenses.csv", stringsAsFactors = FALSE)
tax_data <- read.delim("data/wa_incomes_zip_code.csv",
stringsAsFactors = FALSE)
# S/O to Adele for rescuing us
# from this _tab_ seperated file.
pet_data_zip <- pet_data %>% group_by(zip_code)
map <- ggplot(pet_data,aes(longitude,latitude)) +
geom_polygon(data=us,aes(x=long,y=lat,group=group),color='gray',fill=NA,alpha=.35)+
geom_point(aes(color = count),size=.15,alpha=.25) +
xlim(-125,-65)+ylim(20,50)
joined_data <- left_join(pet_data, tax_data, by = )
#Recommend using tax bracket bins and now joining data sets
#Don't join dataframes if it makes no sense
View(pet_data_zip)
View(pet_data)
pet_data_zip <- pet_data %>% group_by(zip_code) %>% select(zip_code)
View(pet_data_zip)
zips <- data("zipcode")
zips <- zipcode
View(zipcode)
View(zips)
zips <- rename(zipcode, zip=zip_code)
zips <- rename(zipcode, "zip"="zip_code")
View(zipcode)
colnames(zipcode)[which(names(zipcode) == "zip")] <- "zip_code"
View(zipcode)
left_join(pet_data_zip, zips, by = "zip_code")
left_join(pet_data_zip, zipcode, by = "zip_code")
pet_data_zip_with_lat <- left_join(pet_data_zip, zipcode, by = "zip_code")
View(pet_data_zip_with_lat)
pet_data_with_lat <- left_join(pet_data, zipcode, by = "zip_code")
View(pet_data_with_lat)
View(tax_data)
colnames(pet_data)[which(names(pet_data) == "zip_code")] <- "zip"
View(pet_data)
View(zipcode)
colnames(zipcode)[which(names(zipcode) == "zip_code")] <- "zip"
colnames(tax_data)[which(names(tax_data) == "zip.code")] <- "zip"
View(tax_data)
colnames(zipcode)[which(names(zipcode) == "zip_code")] <- "zip"
colnames(pet_data)[which(names(pet_data) == "zip_code")] <- "zip"
colnames(zipcode)[which(names(zipcode) == "zip_code")] <- "zip"
colnames(tax_data)[which(names(tax_data) == "zip.code")] <- "zip"
pet_data_with_lat <- left_join(pet_data, zipcode, by = "zip")
View(pet_data_with_lat)
View(tax_data)
colnames(tax_data)[which(names(tax_data) == "zip.Code")] <- "zip"
View(tax_data)
colnames(tax_data)[which(names(tax_data) == "Zip.Code")] <- "zip"
View(zipcode)
View(tax_data)
tax_with_lat <- left_join(tax_data, zipcode, by = "zip")
View(tax_data)
tax_with_lat <- left_join(zipcode tax_data, by = "zip")
tax_with_lat <- left_join(zipcode, tax_data, by = "zip")
tax_with_lat <- left_join(zipcode, tax_data)
tax_data_clean <- clean.zipcodes(tax_data)
tax_data_clean
install.packages("mapdata")
library(mapdata)
shiny::runApp()
View(zipcode)
runApp()
runApp()
install.packages("maps")
install.packages("maps")
library(maps)
library(maps)
View(pet_data_with_lat)
g <- list(
scope = "usa",
projection = list(type = "albers usa"),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(pet_data_with_lat, locationmode = "USA-states", sizes = c(1, 250)) %>%
add_markers(
x = ~ longitude, y = ~ latitude)
) %>%
layout(title = "2018 US shooting Statistics", geo = g)
library(plotly)
g <- list(
scope = "usa",
projection = list(type = "albers usa"),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(pet_data_with_lat, locationmode = "USA-states", sizes = c(1, 250)) %>%
add_markers(
x = ~ longitude, y = ~ latitude)
) %>%
layout(title = "2018 US shooting Statistics", geo = g)
g <- list(
scope = "usa",
projection = list(type = "albers usa"),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(pet_data_with_lat, locationmode = "USA-states", sizes = c(1, 250)) %>%
add_markers(
x = ~ longitude, y = ~ latitude) %>%
layout(title = "2018 US shooting Statistics", geo = g)
View(p)
shiny::runApp()
runApp()
runApp()
install.packages("ggmap")
library(ggmap)
my_location <- "University of Washington"
my_map <- get_map(location = my_location, source = "google", maptype = "roadmap",crop = FALSE)
ggmap(my_map)
my_map <- get_map(location = my_location, source = "google", maptype = "roadmap",crop = FALSE, zoom = 5)
ggmap(my_map)
my_map <- get_map(location = my_location, source = "google", maptype = "roadmap",crop = FALSE, zoom = 7)
ggmap(my_map)
my_location <- "Washington"
my_map <- get_map(location = my_location, source = "google", maptype = "roadmap",crop = FALSE)
ggmap(my_map)
my_location <- "University of Washington"
my_map <- get_map(location = my_location, source = "google", maptype = "roadmap",crop = FALSE, zoom = 7)
ggmap(my_map)
my_map <- get_map(location = my_location, source = "google", maptype = "roadmap",crop = FALSE, zoom = 6)
ggmap(my_map)
my_location <- c(lat = 47.75, lon = 120.74)
my_map <- get_map(location = my_location, source = "google", maptype = "roadmap",crop = FALSE, zoom = 6)
ggmap(my_map)
my_location <- c( lon = 120.74, lat = 47.75)
my_map <- get_map(location = my_location, source = "google", maptype = "roadmap",crop = FALSE, zoom = 6)
ggmap(my_map)
my_location <- c( lon = -120.74, lat = 47.75)
my_map <- get_map(location = my_location, source = "google", maptype = "roadmap",crop = FALSE, zoom = 6)
ggmap(my_map)
my_map <- get_map(location = my_location, source = "google", maptype = "roadmap",crop = FALSE, zoom = 7)
ggmap(my_map)
my_map <- get_map(location = my_location, source = "google", maptype = "roadmap",crop = FALSE, zoom = 6.5)
View(pet_data_with_lat)
runApp()
ggmap(my_map)+
geom_point(aes(x = longitude, y = latitude),
data = pet_data_with_lat,
alpha = .5,
color = "darkred",
size = 3)
