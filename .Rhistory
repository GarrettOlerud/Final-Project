excited
more_minutes_than_hours
my_bday_intro
# a2-foundational-skills
# Set up and Defining variables ------------------------------------------------
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
install.packages("stringr")
library(stringr)
# Create a numeric variable `my_age` that is equal to your age
my_age <- 19
# Create a variable `my_name` that is equal to your first name
my_name <- "garrett"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- sum(60 * 24)
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- sum(24 * 365)
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
introduction <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(introduction)
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is", "Hey, I'm", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(number) {
number * 2
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(number) {
number ^ 3
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Shawshank Redemption", "Cinderella Man",
"Shutter Island", "John Wick", "Superbad", "I Love You Man")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies[1:3], "is a great movie")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- movies[-4]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the appropriate function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- Sys.Date()
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date("2018-6-8")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
days_till_bday <- as.Date("2018-9-10") - today
new_age <- my_age + 1
make_birthday_intro <- function(name, age, days, new_age) {
intro <- make_introduction(name, age)
birthday_intro <- paste0(intro, " In ", days, " days I'll be ", new_age, ".")
return(birthday_intro)
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, days_till_bday, new_age)
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(a, b){
x <- c("INFO 201", "CSE 142")
remove <- gsub("[0-9]+", " ", x)
return(remove)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(x)
my_bday_intro
library(dpylr)
library(dplyr)
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
View(nycflights13)
View("nycflights13")
library("nycflights13')
library("nycflights13")
library("nycflights13")
View(flights)
colnames(flights)
colnames(flights)
ncol(flights)
nrow(flights)
??flights
air_delay <- mutate(flights, delay_during_flight = arr_delay - dep_delay)
flights <- mutate(flights, delay_during_flight = arr_delay - dep_delay)
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay)
View(flights)
flights <- arrange(flights, desc(gain_in_air))
View(head(flights))
flights <- arrange(flights, desc(gain_in_air)) %>%
View(head(flights))
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay) %>%  arrange(flights, desc(gain_in_air))
flights <- flights %>%  mutate(flights, gain_in_air = arr_delay - dep_delay) %>% arrange(flights, desc(gain_in_air))
flights <- filghits %>%
arrange(-gain_in_air)
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay)
# Exercise 5: dplyr grouped operations
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
# Which month had the greatest average departure delay?
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
# You can look up these airports in the `airports` data frame!
# Which city was flown to with the highest average speed?
library(dplyr)
library(nycflights13)
dep_delay_by_mounth <- flights %>%
group_by(mounth) %>%
summarise(delay = mean(dep_delay, na.rm = T))
library(dplyr)
dep_delay_by_mounth <- flights %>%
group_by(mounth) %>%
summarise(delay = mean(dep_delay, na.rm = T))
library(nycflights13)
dep_delay_by_mounth <- flights %>%
group_by(mounth) %>%
summarise(delay = mean(dep_delay, na.rm = T))
View(flights)
library(nycflights13)
library(dplyr)
dep_delay_by_mounth <- flights %>%
group_by(mounth) %>%
summarise(delay = mean(dep_delay, na.rm = T))
dep_delay_by_mounth <- flights %>%
group_by(month) %>%
summarise(delay = mean(dep_delay, na.rm = T))
filter(dep_delay_by_mounth, delay == max(delay)) %>%
select(mounth)
filter(dep_delay_by_month, delay == max(delay)) %>%
select(month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(delay = mean(dep_delay, na.rm = T))
filter(dep_delay_by_month, delay == max(delay)) %>%
select(month)
plot(dep_delay_by_month)
big_delay <- flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = T)) %>%
arrange(-delay)
head(big_delay)
View(airports)
library(nycflights13)
library(dplyr)
library("httr")
shiny::runApp('C:/Users/Garre/Desktop/info201/ch16-shiny/exercise-3')
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
ui <- fluidPage(
# A page header
h1("Car MPG's"),
# Add a select input for the x variable
selectInput(
"x_var",
label = "x variable",
choices = select_values,
selected = "displ"
),
# Add a select input for the y variable
selectInput(
"y_var",
label = "y variable",
choices = select_values,
selected = "cyl"
),
# Add a sliderInput to set the size of each point
sliderInput("size", label = "size of point", min = 0, max = 10, value = 1
),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color", label = "color", choices = list("RED" = "red", "Blue" = "blue", "Orange" = "orange"
)),
# Plot the output with the name "scatter"
plotOutput("scatter")
)
shinyUI(ui)
ui <- fluidPage(
# A page header
h1("Car MPG's"),
# Add a select input for the x variable
selectInput(
"x_var",
label = "x variable",
choices = select_values,
selected = "displ"
),
# Add a select input for the y variable
selectInput(
"y_var",
label = "y variable",
choices = select_values,
selected = "cyl"
),
# Add a sliderInput to set the size of each point
sliderInput("size", label = "size of point", min = 0, max = 10, value = 1
),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color", label = "color", choices = list("RED" = "red", "Blue" = "blue", "Orange" = "orange"
)),
# Plot the output with the name "scatter"
plotOutput("scatter")
)
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
h1("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "displ"
),
# Add a select input for the y variable
selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "cyl"
),
# Add a sliderInput to set the size of each point
sliderInput("size", label = "Size of point", min = 1, max = 10, value = 5),
# Add a selectInput that allows you to select a color from a list of choices
selectInput(
"color",
label = "Color",
choices = list("Red" = "red", "Blue" = "blue", "Green" = "green")
),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
runApp('C:/Users/Garre/Desktop/info201/ch16-shiny/exercise-3')
runApp('C:/Users/Garre/Desktop/info201/ch16-shiny/exercise-1')
runApp('C:/Users/Garre/Desktop/info201/ch16-shiny/exercise-1')
library(dplyr)
library(ggplot2)
library(knitr)
source("scripts/analysis.R")
source("scripts/chart1")
library(dplyr)
library(ggplot2)
library(knitr)
source("scripts/analysis.R")
source("scripts/chart1.R")
source("scripts/chart2.R")
data <- read.csv("data/intro-survey.csv", stringsAsFactors = FALSE)
summary_data <- intro_function(data)
knitr::opts_chunk$set(echo = TRUE)
shiny::runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
colnames(midwest)
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
mutate(df_m, threshhold = input$decimal > percpovertyknown)
mutate(df_m, threshhold = 50 > percpovertyknown)
mutate(df_m, threshhold = 50 > percpovertyknown)$threshhold
mutate(df_m, threshhold = 90 > percpovertyknown)$threshhold
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
shiny::runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
shiny::runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
shiny::runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
shiny::runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
shiny::runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
shiny::runApp('C:/Users/Garre/Desktop/info201/a8-shiny-GarrettOlerud')
shiny::runApp('C:/Users/Garre/Desktop/info201/Final-Project')
runApp('C:/Users/Garre/Desktop/info201/Final-Project')
View(tax_data)
runApp('C:/Users/Garre/Desktop/info201/Final-Project')
View(pet_data_zip)
View(pet_data)
View(tax_with_lat)
test_1 <- tax_with_lat %>% group_by(zip) %>%
summarise(most_common = max(Number.of.returns)) %>%
arrange(most_common)
View(test_1)
test_1 <- tax_with_lat %>% group_by(zip, Adjusted.Gross.Income) %>%
summarise(most_common = max(Number.of.returns)) %>%
arrange(most_common)
View(test_1)
test_1 <- tax_with_lat %>% group_by(zip) %>%
summarise(most_common = max(Number.of.returns, Adjusted.Gross.Income)) %>%
arrange(most_common)
View(test_1)
test_1 <- tax_with_lat %>% group_by(zip) %>%
summarise(most_common = max(Number.of.returns), Adjusted.Gross.Income) %>%
arrange(most_common)
test_1 <- tax_with_lat %>% group_by(zip) %>%
summarise(most_common = max(Number.of.returns), most_common$Adjusted.Gross.Income) %>%
arrange(most_common)
test_1 <- tax_with_lat %>% group_by(zip) %>%
summarise(most_common = max(Number.of.returns)) %>%
arrange(most_common)
View(test_1)
test_2 <- tax_with_lat %>% group_by(zip, Adjusted.Gross.Income)
View(test_2)
test_2 <- tax_with_lat %>% select(zip, Adjusted.Gross.Income)
View(test_2)
test_3 <- left_join(test_1, test_2, by = "zip")
View(test_3)
test_3 <- inner_join(test_1, test_2, by = "zip")
View(test_3)
test_2 <- tax_with_lat %>% select(zip, Adjusted.Gross.Income, Number.of.returns) %>%
filter(Number.of.returns = max(Number.of.returns))
test_2 <- tax_with_lat %>% select(zip, Adjusted.Gross.Income, Number.of.returns) %>%
filter(Number.of.returns == max(Number.of.returns))
View(test_2)
test_2 <- tax_with_lat %>% select(zip, Adjusted.Gross.Income, Number.of.returns) %>%
summarize(Number.of.returns == max(Number.of.returns))
test_2 <- tax_with_lat %>% select(zip, Adjusted.Gross.Income)
View(test_2)
test_4 <- merge(test_1, test_2, all = F)
View(test_4)
test_5 <- test_4 %>% group_by(zip)
View(test_5)
View(test_5)
test_x <- tax_with_lat$Most_Common_Bracket(, max(tax_with_lat$Number.of.returns))
test_2 <- tax_with_lat %>% select(zip, Adjusted.Gross.Income, Number.of.returns)
test_z <- test_1 %>% semi_join(test_2, by = "Number.of.returns")
test_1 <- tax_with_lat %>% group_by(zip) %>%
summarise(Number.of.returns = max(Number.of.returns))
test_2 <- tax_with_lat %>% select(zip, Adjusted.Gross.Income, Number.of.returns)
test_z <- test_1 %>% semi_join(test_2, by = "Number.of.returns")
View(test_z)
test_1 <- tax_with_lat %>% group_by(zip) %>%
summarise(Number.of.returns = max(Number.of.returns))
test_1 <- tax_with_lat %>% group_by(zip) %>%
summarise(Number.of.returns = max(Number.of.returns, Adjusted.Gross.Income))
View(test_1)
test_1 <- tax_with_lat %>% group_by(zip) %>%
select(Number.of.returns = max(Number.of.returns, Adjusted.Gross.Income))
test_1 <- tax_with_lat %>% group_by(zip) %>%
summarize_at(Number.of.returns = max(Number.of.returns), Adjusted.Gross.Income))
test_1 <- tax_with_lat %>% group_by(zip) %>%
summarize(Number.of.returns = max(Number.of.returns), Adjusted.Gross.Income)
test_1 <- tax_with_lat %>% group_by(zip) %>%
summarize(Number.of.returns = max(Number.of.returns),
Adjusted.Gross.Income = max(Number.of.returns))
View(test_1)
test_1 <- tax_with_lat %>% group_by(zip) %>%
summarize(Number.of.returns = max(Number.of.returns),
Adjusted.Gross.Income = Adjusted.Gross.Income(max(Number.of.returns)))
test_1 <- tax_with_lat %>% group_by(zip) %>%
summarize(Number.of.returns = max(Number.of.returns),
Adjusted.Gross.Income = Adjusted.Gross.Income)
test_f <- tax_with_lat %>% select(zip, Adjusted.Gross.Income, Number.of.returns)
test_f <- tax_with_lat %>% select(zip, Adjusted.Gross.Income, Number.of.returns) %>% group_by(zip)
test_f[test_f$Number.of.returns = max(test_f$Number.of.returns),]
test_f[test_f$Number.of.returns == max(test_f$Number.of.returns),]
aggregate(test_f$Number.of.returns, by = list(test_f$zip), max)
please <- test_2 %>% group_by(zip) %>% top_n(1, Number.of.returns)
View(please)
test_2 <- tax_with_lat %>% select(zip, Adjusted.Gross.Income, Number.of.returns) %>%
group_by(zip) %>% top_n(1, Number.of.returns)
View(test_2)
most_common_bracket <- tax_with_lat %>% select(zip, Adjusted.Gross.Income, Number.of.returns) %>%
group_by(zip) %>% top_n(1, Number.of.returns)
#determine number of adoptions per zipcode
test_xx <- most_adopted %>% group_by(zip)
test_zz <- summarize(freqfunc(nrow(test_xx)))
test_zz <- summarize(freqfunc(nrow(test_xx)), 28)
#determine number of adoptions per zipcode
test_xx <- most_adopted %>% group_by(zip) %>% count(nrow)
#determine number of adoptions per zipcode
test_xx <- most_adopted %>% group_by(zip) %>% summarize(count = n())
View(test_xx)
#determine number of adoptions per zipcode
total_adoptions_by_zip <- most_adopted %>% group_by(zip) %>% summarize(count = n())
test_vv <- left_join(most_common_bracket, total_adoptions_by_zip, by = zip)
test_vv <- left_join(most_common_bracket, total_adoptions_by_zip, by = "zip")
View(test_vv)
brackets_adoptions <- left_join(most_common_bracket, total_adoptions_by_zip, by = "zip")
colnames(brackets_adoptions) <- c("Zip", "Most_Common_Bracket", "Returns", "Total_Adoptions")
View(brackets_adoptions)
setwd("C:/Users/Garre/Desktop/info201/Final-Project")
runApp()
setwd("C:/Users/Garre/Desktop/info201/Final-Project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("choroplethrZip")
runApp()
runApp()
runApp()
runApp()
